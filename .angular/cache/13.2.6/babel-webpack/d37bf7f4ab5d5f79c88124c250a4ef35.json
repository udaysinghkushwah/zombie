{"ast":null,"code":"import { BehaviorSubject, distinctUntilChanged, map } from 'rxjs';\nimport { DEFAULT_INIT_BOARD } from '@zombie/board/interfaces';\nimport * as i0 from \"@angular/core\";\nexport let BoardDataAccessService = /*#__PURE__*/(() => {\n  class BoardDataAccessService {\n    constructor() {\n      this.newZombieId = 0;\n      this.newCreatureId = 0;\n      this.board = new BehaviorSubject(DEFAULT_INIT_BOARD);\n      this.board$ = this.board.asObservable();\n    }\n\n    fetchBoard() {\n      return this.board$;\n    }\n\n    getBoard() {\n      return this.board.value;\n    }\n\n    setBoard(newBoard) {\n      this.board.next(newBoard);\n    }\n\n    fetchZombies() {\n      return this.fetchTokensOfType('ZOMBIE');\n    }\n\n    fetchCreatures() {\n      return this.fetchTokensOfType('CREATURE');\n    }\n\n    fetchTokensOfType(tokenType) {\n      return this.fetchBoard().pipe(distinctUntilChanged(), map(({\n        grid\n      }) => grid.reduce((allZombies, row) => [...allZombies, ...row.reduce((zombiesOnRow, cell) => [...zombiesOnRow, ...cell.filter(({\n        type\n      }) => type === tokenType)], [])], [])));\n    }\n\n    getZombies() {\n      return this.getTokensOfType('ZOMBIE');\n    }\n\n    getCreatures() {\n      return this.getTokensOfType('CREATURE');\n    }\n\n    getTokensOfType(tokenType) {\n      const {\n        grid\n      } = this.getBoard();\n      return grid.reduce((allZombies, row) => [...allZombies, ...row.reduce((zombiesOnRow, cell) => [...zombiesOnRow, ...cell.filter(({\n        type\n      }) => type === tokenType)], [])], []);\n    }\n\n    getCreaturesOnCoordinate(coords) {\n      return this.getTokensOnCoordinate(coords).filter(({\n        type\n      }) => type === 'CREATURE');\n    }\n\n    getZombiesOnCoordinate(coords) {\n      return this.getTokensOnCoordinate(coords).filter(({\n        type\n      }) => type === 'ZOMBIE');\n    }\n\n    getTokensOnCoordinate(coords) {\n      const board = this.getBoard();\n      const {\n        grid\n      } = board;\n      const {\n        x,\n        y\n      } = coords;\n      return grid[y][x];\n    }\n\n    addZombieToCell(coords, zombieId = this.newZombieId++) {\n      this.addTokenToCell(coords, {\n        type: 'ZOMBIE',\n        id: zombieId\n      });\n    }\n\n    addCreatureToCell(coords, creatureId = this.newCreatureId++) {\n      this.addTokenToCell(coords, {\n        type: 'CREATURE',\n        id: creatureId\n      });\n    }\n\n    addTokenToCell(coords, token) {\n      const board = this.getBoard();\n      const {\n        grid\n      } = JSON.parse(JSON.stringify(board));\n      const {\n        x,\n        y\n      } = coords;\n      grid[y][x].push(token);\n      this.setBoard(Object.assign(Object.assign({}, board), {\n        grid\n      }));\n    }\n\n    removeZombiesFromCell(coords) {\n      const board = this.getBoard();\n      const {\n        grid\n      } = board;\n      const {\n        x,\n        y\n      } = coords;\n      grid[y][x] = grid[y][x].filter(token => token.type !== 'ZOMBIE');\n      this.setBoard(Object.assign(Object.assign({}, board), {\n        grid\n      }));\n    }\n\n    removeCreaturesFromCell(coords) {\n      const board = this.getBoard();\n      const {\n        grid\n      } = board;\n      const {\n        x,\n        y\n      } = coords;\n      grid[y][x] = grid[y][x].filter(token => token.type !== 'CREATURE');\n      this.setBoard(Object.assign(Object.assign({}, board), {\n        grid\n      }));\n    }\n\n    removeCreature(creatureId) {\n      const board = this.getBoard();\n      const {\n        grid\n      } = board;\n      const newGrid = grid.reduce((newGrid, row) => [...newGrid, ...[row.reduce((newRow, cell) => [...newRow, ...[cell.filter(token => !(token.type === 'CREATURE' && token.id === creatureId))]], [])]], []);\n      this.setBoard(Object.assign(Object.assign({}, board), {\n        grid: newGrid\n      }));\n    }\n\n    removeZombie(zombieId) {\n      const board = this.getBoard();\n      const {\n        grid\n      } = board;\n      const newGrid = grid.reduce((newGrid, row) => [...newGrid, ...[row.reduce((newRow, cell) => [...newRow, ...[cell.filter(token => !(token.type === 'ZOMBIE' && token.id === zombieId))]], [])]], []);\n      this.setBoard(Object.assign(Object.assign({}, board), {\n        grid: newGrid\n      }));\n    }\n\n    getCoordsWithTokenAndId(type, id) {\n      const {\n        grid\n      } = this.getBoard();\n      const returnable = [];\n\n      for (let y = 0; y < grid.length; y++) {\n        for (let x = 0; x < grid[y].length; x++) {\n          for (let i = 0; i < grid[y][x].length; i++) {\n            const token = grid[y][x][i];\n\n            if (token.id === id && token.type === type) {\n              returnable.push({\n                y,\n                x\n              });\n            }\n          }\n        }\n      }\n\n      return returnable;\n    }\n\n  }\n\n  BoardDataAccessService.ɵfac = function BoardDataAccessService_Factory(t) {\n    return new (t || BoardDataAccessService)();\n  };\n\n  BoardDataAccessService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BoardDataAccessService,\n    factory: BoardDataAccessService.ɵfac,\n    providedIn: 'root'\n  });\n  return BoardDataAccessService;\n})();","map":null,"metadata":{},"sourceType":"module"}