{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { isEqual } from 'lodash';\nimport { combineLatest, distinctUntilChanged, map, Subscription } from 'rxjs';\nimport { MODE_CREATURE, MODE_ZOMBIE, SettingsForm } from './settings-form';\nimport { BoardDataAccessService } from '@zombie/board/data-access';\nimport { GRID_MAX, GRID_MIN } from '@zombie/board/interfaces';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@zombie/board/data-access\";\nimport * as i2 from \"../../../../../shared/ui/src/lib/modal/modal.component\";\nimport * as i3 from \"../../../../../shared/ui/src/lib/modal/modal-header/modal-header.component\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../../../../../shared/ui/src/lib/modal/modal-body/modal-body.component\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"../../../../../board/ui/src/lib/board-ui.component\";\nimport * as i8 from \"../../../../../shared/ui/src/lib/modal/modal-footer/modal-footer.component\";\nimport * as i9 from \"../../../../../shared/ui/src/lib/button/button.component\";\n\nfunction HomeModalsSettingsComponent_strong_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"strong\", 16);\n    i0.ɵɵtext(1, \"Zombie\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HomeModalsSettingsComponent_strong_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"strong\", 17);\n    i0.ɵɵtext(1, \"Creature\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HomeModalsSettingsComponent_ng_container_26_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const message_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", message_r4, \" \");\n  }\n}\n\nfunction HomeModalsSettingsComponent_ng_container_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, HomeModalsSettingsComponent_ng_container_26_p_1_Template, 2, 1, \"p\", 18);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.errorMessages);\n  }\n}\n\nexport let HomeModalsSettingsComponent = /*#__PURE__*/(() => {\n  class HomeModalsSettingsComponent {\n    constructor(board) {\n      this.board = board;\n      this.gridMin = GRID_MIN;\n      this.gridMax = GRID_MAX;\n      this.hasAttempedSubmission = false;\n      this.settingsForm = new SettingsForm();\n      this.subscriptions = new Subscription();\n      this.grid$ = this.board.fetchBoard().pipe(map(({\n        grid\n      }) => grid));\n      this.closeable = false;\n      this.settings = new EventEmitter();\n      this.dismiss = new EventEmitter();\n      this.subscriptions.add(this.bindSizeToSizeExtra());\n      this.subscriptions.add(this.bindSizeExtraToSize());\n      this.subscriptions.add(this.bindSizeToBoardGrid());\n      this.subscriptions.add(this.bindMovesToBoardMoveset());\n      this.subscriptions.add(this.bindBoardGridToZombies());\n      this.subscriptions.add(this.bindBoardGridToCreatures());\n    }\n\n    ngOnInit() {\n      this.settingsForm.formControls.size.setValue(this.settingsForm.formControls.size.value);\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.unsubscribe();\n    }\n\n    bindSizeToSizeExtra() {\n      const size = this.settingsForm.formControls.size;\n      const sizeExtra = this.settingsForm.formControls.sizeExtra;\n      const sizeChanges = size.valueChanges.pipe(distinctUntilChanged());\n      return sizeChanges.subscribe(data => sizeExtra.setValue(data));\n    }\n\n    bindSizeExtraToSize() {\n      const size = this.settingsForm.formControls.size;\n      const sizeExtra = this.settingsForm.formControls.sizeExtra;\n      const sizeExtraChanges = sizeExtra.valueChanges.pipe(distinctUntilChanged());\n      return sizeExtraChanges.subscribe(data => size.setValue(data));\n    }\n\n    bindSizeToBoardGrid() {\n      const sizeChanges = this.settingsForm.formControls.size.valueChanges.pipe(distinctUntilChanged());\n      const boardChanges = this.board.fetchBoard().pipe(distinctUntilChanged(isEqual));\n      return combineLatest([sizeChanges, boardChanges]).subscribe(([size, board]) => {\n        const {\n          grid\n        } = board;\n        const newGrid = [];\n\n        for (let y = 0; y < size; y++) {\n          const row = [];\n\n          for (let x = 0; x < size; x++) {\n            row.push((grid[y] || [])[x] || []);\n          }\n\n          newGrid.push(row);\n        }\n\n        this.board.setBoard(Object.assign(Object.assign({}, board), {\n          grid: newGrid\n        }));\n      });\n    }\n\n    bindMovesToBoardMoveset() {\n      const moveChanges = this.settingsForm.formControls.moveSet.valueChanges.pipe(distinctUntilChanged());\n      const boardChanges = this.board.fetchBoard().pipe(distinctUntilChanged(isEqual));\n      return combineLatest([moveChanges, boardChanges]).subscribe(([moveSet, board]) => {\n        this.board.setBoard(Object.assign(Object.assign({}, board), {\n          moveSet\n        }));\n      });\n    }\n\n    bindBoardGridToZombies() {\n      const zombieCounter = this.settingsForm.formControls.zombies;\n      const zombiesOnBoardChanges = this.board.fetchZombies().pipe(distinctUntilChanged());\n      return zombiesOnBoardChanges.subscribe(zombies => zombieCounter.setValue(zombies.length));\n    }\n\n    bindBoardGridToCreatures() {\n      const creatureCounter = this.settingsForm.formControls.creatures;\n      const creaturesOnBoardChanges = this.board.fetchCreatures().pipe(distinctUntilChanged());\n      return creaturesOnBoardChanges.subscribe(creatures => creatureCounter.setValue(creatures.length));\n    }\n\n    onTileClick(coords) {\n      this.updateGameBoard(coords);\n    }\n\n    updateGameBoard(coords) {\n      const cell = this.board.getTokensOnCoordinate(coords);\n      const mode = this.settingsForm.formControls.mode.value;\n      const zombies = cell.filter(value => value.type === 'ZOMBIE');\n      const creatures = cell.filter(value => value.type === 'CREATURE');\n\n      switch (mode) {\n        case MODE_ZOMBIE:\n          zombies.length > 0 ? this.board.removeZombiesFromCell(coords) : this.board.addZombieToCell(coords);\n          break;\n\n        case MODE_CREATURE:\n          creatures.length > 0 ? this.board.removeCreaturesFromCell(coords) : this.board.addCreatureToCell(coords);\n          break;\n      }\n    }\n\n    get errors() {\n      return Object.keys(this.settingsForm.controls).map(key => {\n        var _a;\n\n        return {\n          key,\n          error: (_a = this.settingsForm.get(key)) === null || _a === void 0 ? void 0 : _a.errors\n        };\n      }).filter(({\n        error\n      }) => error);\n    }\n\n    get errorMessages() {\n      return this.errors.map(({\n        key\n      }) => {\n        return {\n          size: `Use the slider to select a size between ${this.gridMin} and ${this.gridMax}`,\n          sizeExtra: `Use the slider to select a size between ${this.gridMin} and ${this.gridMax}`,\n          zombies: `Click on the grid to place at least 1 zombie`,\n          creatures: `Click on the grid to place creatures`,\n          mode: `Select a token to place by clicking on the radio buttons`,\n          moveSet: `Type a string of directions (U, D, L, R for Up, Down, Left and Right respectively) that zombies will follow`\n        }[key];\n      });\n    }\n\n    submitButtonClick() {\n      this.hasAttempedSubmission = true;\n\n      if (this.errorMessages.length <= 0) {\n        this.settings.emit(this.board.getBoard());\n      }\n    }\n\n    onModalDismiss(event) {\n      if (!this.closeable) {\n        return;\n      }\n\n      this.dismiss.emit(event);\n    }\n\n  }\n\n  HomeModalsSettingsComponent.ɵfac = function HomeModalsSettingsComponent_Factory(t) {\n    return new (t || HomeModalsSettingsComponent)(i0.ɵɵdirectiveInject(i1.BoardDataAccessService));\n  };\n\n  HomeModalsSettingsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HomeModalsSettingsComponent,\n    selectors: [[\"zombie-home-modals-settings\"]],\n    inputs: {\n      closeable: \"closeable\"\n    },\n    outputs: {\n      settings: \"settings\",\n      dismiss: \"dismiss\"\n    },\n    features: [i0.ɵɵProvidersFeature([BoardDataAccessService])],\n    decls: 30,\n    vars: 18,\n    consts: [[3, \"dismiss\"], [1, \"pl-12\", \"mb-4\"], [1, \"pl-12\", 2, \"margin-top\", \"0\"], [\"class\", \"text-green-600\", 4, \"ngIf\"], [\"class\", \"text-blue-600\", 4, \"ngIf\"], [1, \"flex\", \"flex-col\", \"text-gray-900\", \"gap-y-5\", 3, \"formGroup\"], [1, \"block\", \"pl-12\", \"pr-10\", 3, \"grid\", \"tileClicked\"], [1, \"flex\", \"justify-center\", \"px-3\", \"pr-10\", \"align-middle\"], [\"type\", \"number\", 3, \"formControl\", \"min\", \"max\"], [\"type\", \"range\", 1, \"flex-1\", 3, \"formControl\", \"min\", \"max\"], [1, \"flex\", \"justify-center\", \"pl-12\", \"gap-x-5\"], [\"type\", \"radio\", \"name\", \"mode\", 3, \"formControl\", \"value\"], [1, \"flex\", \"items-baseline\", \"justify-start\", \"ml-12\", \"mr-10\", \"gap-x-5\"], [\"type\", \"text\", \"placeholder\", \"UDLR\", 1, \"inline-block\", \"w-full\", \"px-4\", \"py-2\", \"border-gray-500\", \"rounded-none\", \"focus:ring-indigo-500\", \"focus:border-indigo-500\", \"rounded-r-md\", \"sm:text-sm\", 3, \"formControl\"], [4, \"ngIf\"], [\"color\", \"green\", 1, \"inline-flex\", \"justify-center\", \"w-full\", \"ml-12\", \"mr-10\", 3, \"click\"], [1, \"text-green-600\"], [1, \"text-blue-600\"], [\"class\", \"ml-12 mr-10 text-red-500\", \"style\", \"margin-top: 0\", 4, \"ngFor\", \"ngForOf\"], [1, \"ml-12\", \"mr-10\", \"text-red-500\", 2, \"margin-top\", \"0\"]],\n    template: function HomeModalsSettingsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"zombie-modal\", 0);\n        i0.ɵɵlistener(\"dismiss\", function HomeModalsSettingsComponent_Template_zombie_modal_dismiss_0_listener($event) {\n          return ctx.onModalDismiss($event);\n        });\n        i0.ɵɵelementStart(1, \"zombie-modal-header\")(2, \"h3\", 1);\n        i0.ɵɵtext(3, \"Settings\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"p\", 2);\n        i0.ɵɵtext(5, \" Click on the grid to place a \");\n        i0.ɵɵtemplate(6, HomeModalsSettingsComponent_strong_6_Template, 2, 0, \"strong\", 3);\n        i0.ɵɵtemplate(7, HomeModalsSettingsComponent_strong_7_Template, 2, 0, \"strong\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"zombie-modal-body\")(9, \"form\", 5)(10, \"zombie-board-ui\", 6);\n        i0.ɵɵlistener(\"tileClicked\", function HomeModalsSettingsComponent_Template_zombie_board_ui_tileClicked_10_listener($event) {\n          return ctx.onTileClick($event);\n        });\n        i0.ɵɵpipe(11, \"async\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 7);\n        i0.ɵɵelement(13, \"input\", 8)(14, \"input\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 10)(16, \"label\");\n        i0.ɵɵelement(17, \"input\", 11);\n        i0.ɵɵtext(18, \" Zombie \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"label\");\n        i0.ɵɵelement(20, \"input\", 11);\n        i0.ɵɵtext(21, \" Creature \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(22, \"div\", 12)(23, \"label\");\n        i0.ɵɵtext(24, \"Moves: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(25, \"input\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(26, HomeModalsSettingsComponent_ng_container_26_Template, 2, 1, \"ng-container\", 14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"zombie-modal-footer\")(28, \"zombie-button\", 15);\n        i0.ɵɵlistener(\"click\", function HomeModalsSettingsComponent_Template_zombie_button_click_28_listener() {\n          return ctx.submitButtonClick();\n        });\n        i0.ɵɵtext(29, \"Submit\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.settingsForm.formControls.mode.value === 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.settingsForm.formControls.mode.value === 1);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.settingsForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"grid\", i0.ɵɵpipeBind1(11, 16, ctx.grid$));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formControl\", ctx.settingsForm.formControls.sizeExtra)(\"min\", ctx.gridMin)(\"max\", ctx.gridMax);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formControl\", ctx.settingsForm.formControls.size)(\"min\", ctx.gridMin)(\"max\", ctx.gridMax);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formControl\", ctx.settingsForm.formControls.mode)(\"value\", 0);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formControl\", ctx.settingsForm.formControls.mode)(\"value\", 1);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"formControl\", ctx.settingsForm.formControls.moveSet);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.hasAttempedSubmission);\n      }\n    },\n    directives: [i2.ModalComponent, i3.ModalHeaderComponent, i4.NgIf, i5.ModalBodyComponent, i6.ɵNgNoValidate, i6.NgControlStatusGroup, i6.FormGroupDirective, i7.BoardUiComponent, i6.NumberValueAccessor, i6.MinValidator, i6.MaxValidator, i6.DefaultValueAccessor, i6.NgControlStatus, i6.FormControlDirective, i6.RangeValueAccessor, i6.RadioControlValueAccessor, i4.NgForOf, i8.ModalFooterComponent, i9.ButtonComponent],\n    pipes: [i4.AsyncPipe],\n    encapsulation: 2\n  });\n  return HomeModalsSettingsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}