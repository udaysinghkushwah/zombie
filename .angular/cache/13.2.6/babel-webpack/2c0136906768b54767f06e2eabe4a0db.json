{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DEFAULT_INIT_GRID, GRID_MAX, GRID_MIN } from '@zombie/board/interfaces';\nexport class SettingsForm extends FormGroup {\n  get formControls() {\n    return {\n      size: this.controls['size'],\n      sizeExtra: this.controls['sizeExtra'],\n      zombies: this.controls['zombies'],\n      creatures: this.controls['creatures'],\n      mode: this.controls['mode'],\n      moveSet: this.controls['moveSet']\n    };\n  }\n\n  constructor() {\n    super(settingsFormInitControls);\n  }\n\n}\nexport const MODE_ZOMBIE = 0;\nexport const MODE_CREATURE = 1;\nexport const settingsFormInitControls = {\n  size: new FormControl(DEFAULT_INIT_GRID.length, [Validators.required, Validators.min(GRID_MIN), Validators.max(GRID_MAX)]),\n  // extra control, will not be sent\n  sizeExtra: new FormControl(2, [Validators.required, Validators.min(GRID_MIN), Validators.max(GRID_MAX)]),\n  zombies: new FormControl(0, [Validators.required, Validators.min(1)]),\n  creatures: new FormControl(0, [Validators.required, Validators.min(1)]),\n  mode: new FormControl(MODE_ZOMBIE, [Validators.required, Validators.min(MODE_ZOMBIE), Validators.max(MODE_CREATURE)]),\n  moveSet: new FormControl('', [Validators.required, control => {\n    const value = control.value;\n    const acceptedCharacters = 'UDLRudlr'.split('');\n    const invalidCharacters = value.split('').filter(ch => !acceptedCharacters.includes(ch));\n\n    if (invalidCharacters.length > 0) {\n      return {\n        invalidCharacters: invalidCharacters\n      };\n    }\n\n    if (value.length - invalidCharacters.length < 1) {\n      return {\n        tooShort: true\n      };\n    }\n\n    return null;\n  }])\n};","map":null,"metadata":{},"sourceType":"module"}